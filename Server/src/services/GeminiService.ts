import { GoogleGenerativeAI } from "@google/generative-ai";
import PanelModel from "../models/PanelModel";
import VolumeModel from "../models/VolumeModel";
import TimeModel from "../models/TimeModel";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// d√πng circuit breaker ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi v·ªõi Gemini API
let circuitBreakerState = {
  isOpen: false,
  failureCount: 0,
  lastFailureTime: 0,
  threshold: 5, // s·ªë l·∫ßn th·∫•t b·∫°i tr∆∞·ªõc khi m·ªü m·∫°ch
  timeout: 300000, // th·ªùi gian m·ªü m·∫°ch (5 ph√∫t)
};

// ki·ªÉm tra xem circuit breaker c√≥ n√™n m·ªü hay kh√¥ng
const shouldOpenCircuit = (): boolean => {
  return circuitBreakerState.failureCount >= circuitBreakerState.threshold;
};

// ki·ªÉm tra xem circuit breaker c√≥ n√™n ƒë√≥ng l·∫°i hay kh√¥ng
const shouldCloseCircuit = (): boolean => {
  const now = Date.now();
  return (
    circuitBreakerState.isOpen &&
    now - circuitBreakerState.lastFailureTime > circuitBreakerState.timeout
  );
};

// ƒë√¢y l√† h√†m ƒë·ªÉ ghi nh·∫≠n th·∫•t b·∫°i cho circuit breaker
const recordFailure = (): void => {
  circuitBreakerState.failureCount++;
  circuitBreakerState.lastFailureTime = Date.now();

  if (shouldOpenCircuit()) {
    circuitBreakerState.isOpen = true;
    console.warn(
      `üî¥ Circuit breaker opened - API calls suspended for ${
        circuitBreakerState.timeout / 1000
      } seconds`
    );
  }
};

// ƒë√¢y l√† h√†m ƒë·ªÉ ghi nh·∫≠n th√†nh c√¥ng cho circuit breaker
const recordSuccess = (): void => {
  if (circuitBreakerState.isOpen || circuitBreakerState.failureCount > 0) {
    console.log("‚úÖ Circuit breaker reset - API connection restored");
  }
  circuitBreakerState.failureCount = 0;
  circuitBreakerState.isOpen = false;
};

// c·∫•u h√¨nh retry logic
const RETRY_CONFIG = {
  maxRetries: 3,
  baseDelay: 1000, // 1 second
  maxDelay: 10000, // 10 seconds
  backoffMultiplier: 2,
};

// H√†m sleep ƒë·ªÉ delay gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i
const sleep = (ms: number): Promise<void> =>
  new Promise((resolve) => setTimeout(resolve, ms));

// ki·ªÉm tra xem l·ªói c√≥ ph·∫£i l√† l·ªói c√≥ th·ªÉ th·ª≠ l·∫°i hay kh√¥ng
const isRetryableError = (error: any): boolean => {
  if (!error) return false;

  // Check for 503 Service Unavailable
  if (error.status === 503) return true;

  // Check for other retryable errors
  if (error.status === 429) return true; // Rate limit
  if (error.status === 502) return true; // Bad Gateway
  if (error.status === 504) return true; // Gateway Timeout

  // Check error messages
  const errorMessage = error.message?.toLowerCase() || "";
  return (
    errorMessage.includes("overloaded") ||
    errorMessage.includes("unavailable") ||
    errorMessage.includes("timeout")
  );
};

// H√†m t√≠nh to√°n ƒë·ªô tr·ªÖ gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i
const calculateDelay = (attempt: number): number => {
  const delay =
    RETRY_CONFIG.baseDelay * Math.pow(RETRY_CONFIG.backoffMultiplier, attempt);
  return Math.min(delay, RETRY_CONFIG.maxDelay);
};

// H√†m ch√≠nh ƒë·ªÉ t·∫°o n·ªôi dung v·ªõi c∆° ch·∫ø retry v√† circuit breaker
const generateContentWithRetry = async (prompt: string): Promise<string> => {
  // Check circuit breaker state
  if (shouldCloseCircuit()) {
    circuitBreakerState.isOpen = false;
    circuitBreakerState.failureCount = 0;
  }

  // If circuit breaker is open, return fallback immediately
  if (circuitBreakerState.isOpen) {
    console.log("‚ö° Circuit breaker is open - returning fallback response");
    return getFallbackResponse({ message: "Circuit breaker open" });
  }

  let lastError: any;

  for (let attempt = 0; attempt <= RETRY_CONFIG.maxRetries; attempt++) {
    try {
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      // Record success
      recordSuccess();
      return text;
    } catch (error: any) {
      lastError = error;
      console.error(
        `Gemini API error (attempt ${attempt + 1}/${
          RETRY_CONFIG.maxRetries + 1
        }):`,
        error
      );

      // If this is the last attempt or error is not retryable, break
      if (attempt === RETRY_CONFIG.maxRetries || !isRetryableError(error)) {
        break;
      }

      // Calculate delay and wait before retry
      const delay = calculateDelay(attempt);
      console.log(`Retrying in ${delay}ms...`);
      await sleep(delay);
    }
  }

  // Record failure for circuit breaker
  recordFailure();

  // If all retries failed, provide fallback response
  return getFallbackResponse(lastError);
};

// H√†m ƒë·ªÉ l·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi AI service kh√¥ng kh·∫£ d·ª•ng
const getFallbackResponse = (error: any): string => {
  const isVietnamese = error?.message?.includes("Kh√¥ng th·ªÉ") || true; // Default to Vietnamese

  if (isVietnamese) {
    return `Xin l·ªói, d·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng do qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.

**Trong th·ªùi gian ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ:**
- Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng b√°o ch√°y qua giao di·ªán ch√≠nh
- Xem l·∫°i c√°c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh hi·ªán t·∫°i
- Li√™n h·ªá b·ªô ph·∫≠n k·ªπ thu·∫≠t n·∫øu c√≥ s·ª± c·ªë kh·∫©n c·∫•p

**S·ªë ƒëi·ªán tho·∫°i kh·∫©n c·∫•p PCCC: 114**

C·∫£m ∆°n b·∫°n ƒë√£ th√¥ng c·∫£m!`;
  } else {
    return `Sorry, the AI service is temporarily unavailable due to high traffic. Please try again in a few minutes.

**In the meantime, you can:**
- Check the fire alarm system status through the main interface
- Review current settings and configurations
- Contact technical support for emergency issues

**Emergency Fire Department: 114**

Thank you for your understanding!`;
  }
};

// H√†m ƒë·ªÉ l·∫•y tr·∫°ng th√°i s·ª©c kh·ªèe c·ªßa API
export const getAPIHealthStatus = (): object => {
  return {
    isHealthy: !circuitBreakerState.isOpen,
    circuitBreakerStatus: {
      isOpen: circuitBreakerState.isOpen,
      failureCount: circuitBreakerState.failureCount,
      lastFailureTime: circuitBreakerState.lastFailureTime,
      timeUntilReset: circuitBreakerState.isOpen
        ? Math.max(
            0,
            circuitBreakerState.timeout -
              (Date.now() - circuitBreakerState.lastFailureTime)
          )
        : 0,
    },
    message: circuitBreakerState.isOpen
      ? "Gemini API is temporarily unavailable - Circuit breaker is open"
      : "Gemini API is available",
  };
};

// H√†m ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi v·ªõi API
export const testAPIConnection = async (): Promise<boolean> => {
  try {
    const testPrompt = "Hello, respond with just 'OK' if you can hear me.";
    const response = await generateContentWithRetry(testPrompt);
    return response.toLowerCase().includes("ok");
  } catch (error) {
    console.error("API connectivity test failed:", error);
    return false;
  }
};

// H√†m l·∫•y d·ªØ li·ªáu th·ª±c t·ª´ database
const getSystemData = async () => {
  try {
    // L·∫•y th√¥ng tin panels
    const panels = await PanelModel.find({})
      .select(
        "name panel_type status location loops_supported ram_usage cpu_usage"
      )
      .lean();

    // L·∫•y th√¥ng tin volume settings c·ªßa t·ªß trung t√¢m
    const volumes = await VolumeModel.find({})
      .populate("panelId", "name")
      .select("panelId level updatedAt")
      .lean();

    //L·∫•y th√™m c√°c th√¥ng tin v·ªÅ h·∫πn gi·ªù
    const times = await TimeModel.find({})
      .populate("panelId", "name")
      .select("panelId time name repeat isEnabled ")
      .lean();

    return {
      panels: panels || [],
      volumes: volumes || [],
      times: times || [],
      lastUpdated: new Date().toISOString(),
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu h·ªá th·ªëng:", error);
    return {
      panels: [],
      volumes: [],
      lastUpdated: new Date().toISOString(),
      error: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ h·ªá th·ªëng",
    };
  }
};

// h√†m n√†y d√πng ƒë·ªÉ t·∫°o ph·∫£n h·ªìi t·ª´ AI d·ª±a tr√™n prompt(c√¢u h·ªèi) v√† context (n·∫øu c√≥).
export const generateResponse = async (
  prompt: string,
  context?: string
): Promise<string> => {
  try {
    const fullPrompt = context
      ? `Context: ${context}\n\nQuestion: ${prompt}`
      : prompt;

    return await generateContentWithRetry(fullPrompt);
  } catch (error) {
    console.error("Gemini API error:", error);
    // Return fallback response instead of throwing error
    return getFallbackResponse(error);
  }
};

// H√†m n√†y d√πng ƒë·ªÉ t·∫°o ph·∫£n h·ªìi t·ª´ AI cho c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng b√°o ch√°y v√† an to√†n ph√≤ng ch√°y ch·ªØa ch√°y.
export const generateFireSafetyResponse = async (
  userMessage: string,
  conversationHistory?: any[]
): Promise<string> => {
  // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ h·ªá th·ªëng
  const systemData = await getSystemData();

  let systemPrompt = `
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ qu·∫£n l√Ω h·ªá th·ªëng b√°o ch√°y v√† an to√†n ph√≤ng ch√°y ch·ªØa ch√°y.

     **TH√îNG TIN H·ªÜ TH·ªêNG HI·ªÜN T·∫†I (D·ªØ li·ªáu th·ª±c t·ª´ database):**
    
    **Danh s√°ch Panels, t·ªß b√°o ch√°y hi·ªán c√≥:**
    ${systemData.panels
      .map(
        (panel) =>
          `- Panel: ${panel.name} 
         - Lo·∫°i: ${panel.panel_type}
         - Tr·∫°ng th√°i: ${panel.status || "Kh√¥ng x√°c ƒë·ªãnh"}
         - S·ªë l∆∞·ª£ng loop h·ªó tr·ª£: ${panel.loops_supported || "Kh√¥ng x√°c ƒë·ªãnh"}
         - S·ª≠ d·ª•ng t√†i nguy√™n, ti√™u th·ª• RAM: ${
           panel.ram_usage || "Kh√¥ng x√°c ƒë·ªãnh"
         }%     
         - S·ª≠ d·ª•ng t√†i nguy√™n, ti√™u th·ª• CPU: ${
           panel.cpu_usage || "Kh√¥ng x√°c ƒë·ªãnh"
         }%    
         - V·ªã tr√≠: ${panel.location || "Ch∆∞a x√°c ƒë·ªãnh"}`
      )
      .join("\n")}

    **Danh s√°ch h·∫πn gi·ªù hi·ªán c√≥:**
    ${
      (systemData.times ?? []).length > 0
        ? (systemData.times ?? [])
            .map(
              (time) =>
                `- T√™n: ${time.name} 
             - Gi·ªù: ${time.time || "Kh√¥ng x√°c ƒë·ªãnh"}
             - L·∫∑p l·∫°i: ${
               time.repeat.length > 0 ? time.repeat.join(", ") : "Kh√¥ng"
             }
             - Tr·∫°ng th√°i: ${time.isEnabled ? "B·∫≠t" : "T·∫Øt"}`
            )
            .join("\n")
        : "- Ch∆∞a c√≥ h·∫πn gi·ªù n√†o"
    }

    **C√†i ƒë·∫∑t √¢m l∆∞·ª£ng hi·ªán c√≥ c·ªßa h·ªá th·ªëng :**
    ${
      systemData.volumes.length > 0
        ? systemData.volumes
            .map(
              (vol) =>
                `- M·ª©c √¢m l∆∞·ª£ng: ${vol.level}%
             - C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${vol.updatedAt || "Kh√¥ng x√°c ƒë·ªãnh"}`
            )
            .join("\n")
        : "- Ch∆∞a c√≥ c√†i ƒë·∫∑t √¢m l∆∞·ª£ng n√†o"
    }
    
    **Th√¥ng tin c·∫≠p nh·∫≠t:** ${systemData.lastUpdated}
    ${systemData.error ? `**L∆∞u √Ω:** ${systemData.error}` : ""}

    B·∫°n c√≥ ki·∫øn th·ª©c s√¢u r·ªông v√† c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ:
    - Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† ph√¢n quy·ªÅn trong h·ªá th·ªëng.
    - Qu·∫£n l√Ω c√°c thi·∫øt b·ªã b√°o ch√°y (ƒë·∫ßu b√°o, n√∫t nh·∫•n, t·ªß trung t√¢m).
    - C·∫•u h√¨nh v√† qu·∫£n l√Ω c√°c v√πng (zone) b√°o ch√°y (bao g·ªìm c·∫£ h·ªá th·ªëng ƒë·ªãa ch·ªâ v√† h·ªá th·ªëng th∆∞·ªùng), c√°ch g√°n ƒë·ªãa ch·ªâ cho t·ª´ng thi·∫øt b·ªã v√† ph√¢n bi·ªát gi·ªØa ƒë·ªãa ch·ªâ v·∫≠t l√Ω v√† ƒë·ªãa ch·ªâ logic.
    - L√™n l·ªãch, th√™m, s·ª≠a, x√≥a c√°c t√°c v·ª• h·∫πn gi·ªù cho h·ªá th·ªëng.
    - X·ª≠ l√Ω v√† ghi nh·∫≠n s·ª± c·ªë, b√°o ƒë·ªông trong h·ªá th·ªëng, bao g·ªìm h∆∞·ªõng d·∫´n x·ª≠ l√Ω ban ƒë·∫ßu v√† li√™n h·ªá l·ª±c l∆∞·ª£ng PCCC 114, c≈©ng nh∆∞ c√°c k·ªãch b·∫£n b√°o ƒë·ªông gi·∫£.
    - C·∫•u h√¨nh v√† qu·∫£n l√Ω th√¥ng s·ªë c·ªßa c√°c t·ªß ƒëi·ªÅu khi·ªÉn (FACP) nh∆∞: c√†i ƒë·∫∑t ƒë·ªô nh·∫°y ƒë·∫ßu b√°o, l·∫≠p tr√¨nh ng√µ ra ƒëi·ªÅu khi·ªÉn, thi·∫øt l·∫≠p th·ªùi gian tr√¨ ho√£n, ki·ªÉm tra t√¨nh tr·∫°ng k·∫øt n·ªëi d√¢y v√† c·ª±c t√≠nh.
    - Xem v√† ph√¢n t√≠ch nh·∫≠t k√Ω s·ª± ki·ªán (Event Log) ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói v√† gi√°m s√°t ho·∫°t ƒë·ªông h·ªá th·ªëng.
    - Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ c√°c thi·∫øt b·ªã v√† tr·∫°ng th√°i h·ªá th·ªëng, bao g·ªìm tr·∫°ng th√°i ho·∫°t ƒë·ªông, l·ªói, v√† c·∫£nh b√°o.
    - N·∫Øm v·ªØng c√°c ti√™u chu·∫©n v√† quy ƒë·ªãnh PCCC hi·ªán h√†nh t·∫°i Vi·ªát Nam (v√≠ d·ª•: TCVN 5738-2001, c√°c quy ƒë·ªãnh v·ªÅ l·∫Øp ƒë·∫∑t v√† b·∫£o tr√¨).
    - Ki·∫øn th·ª©c v·ªÅ c√°c lo·∫°i ƒë·∫ßu b√°o ch√°y (kh√≥i quang, kh√≥i ion, nhi·ªát gia tƒÉng, nhi·ªát c·ªë ƒë·ªãnh, l·ª≠a, kh√≠ ga, ƒëa c·∫£m bi·∫øn) v√† nguy√™n l√Ω ho·∫°t ƒë·ªông chi ti·∫øt c·ªßa ch√∫ng.
    - H∆∞·ªõng d·∫´n ki·ªÉm tra ƒë·ªãnh k·ª≥ v√† c√°c bi·ªán ph√°p ph√≤ng ng·ª´a ch√°y n·ªï trong c√°c khu v·ª±c qu·∫£n l√Ω, bao g·ªìm c·∫£ ki·ªÉm tra th·ªß c√¥ng v√† t·ª± ƒë·ªông.
    - **Ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ FALC (Fire Alarm Loop Controller): L√† b·ªô ƒëi·ªÅu khi·ªÉn v√≤ng l·∫∑p trong t·ªß b√°o ch√°y ƒë·ªãa ch·ªâ, qu·∫£n l√Ω v√† gi√°m s√°t to√†n b·ªô c√°c thi·∫øt b·ªã ƒë·∫ßu v√†o/ƒë·∫ßu ra tr√™n m·ªôt v√≤ng l·∫∑p (loop). C√≥ kh·∫£ nƒÉng truy·ªÅn th√¥ng hai chi·ªÅu v·ªõi c√°c thi·∫øt b·ªã ƒë·ªãa ch·ªâ (ƒë·∫ßu b√°o, module gi√°m s√°t, module ƒëi·ªÅu khi·ªÉn) ƒë·ªÉ nh·∫≠n th√¥ng tin ch√≠nh x√°c v·ªÅ v·ªã tr√≠ v√† lo·∫°i s·ª± c·ªë, ƒë·ªìng th·ªùi g·ª≠i l·ªánh k√≠ch ho·∫°t c√°c thi·∫øt b·ªã NAC v√† c√°c thi·∫øt b·ªã ngo·∫°i vi kh√°c.**
    - **Ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ NAC (Notification Appliance Circuit): L√† m·∫°ch ƒëi·ªán cung c·∫•p nƒÉng l∆∞·ª£ng v√† ƒëi·ªÅu khi·ªÉn c√°c thi·∫øt b·ªã b√°o ƒë·ªông √¢m thanh (chu√¥ng, c√≤i) v√† h√¨nh ·∫£nh (ƒë√®n ch·ªõp) khi c√≥ b√°o ƒë·ªông ch√°y. Hi·ªÉu r√µ v·ªÅ c√°c lo·∫°i m·∫°ch NAC (v√≠ d·ª•: Class A, Class B) v√† c√°ch ch√∫ng ho·∫°t ƒë·ªông.**
    - **Quy tr√¨nh ch·∫©n ƒëo√°n v√† kh·∫Øc ph·ª•c c√°c l·ªói c·ª• th·ªÉ li√™n quan ƒë·∫øn v√≤ng l·∫∑p (loop fault), m·∫°ch NAC (NAC fault), ho·∫∑c l·ªói thi·∫øt b·ªã ƒë·ªãa ch·ªâ.**
    - **Hi·ªÉu bi·∫øt v·ªÅ c√°c lo·∫°i module (Input/Output module, Monitor module, Control module) v√† vai tr√≤ c·ªßa ch√∫ng trong h·ªá th·ªëng ƒë·ªãa ch·ªâ.**

    H√£y cung c·∫•p c√°c th√¥ng tin ch√≠nh x√°c, h·ªØu √≠ch, th·ª±c t·∫ø v√† tu√¢n th·ªß c√°c quy tr√¨nh nghi·ªáp v·ª• c·ªßa h·ªá th·ªëng b√°o ch√°y.
    Lu√¥n ∆∞u ti√™n c√°c gi·∫£i ph√°p an to√†n v√† tu√¢n th·ªß quy ƒë·ªãnh PCCC.
    S·ª≠ d·ª•ng ti·∫øng Vi·ªát trong ph·∫£n h·ªìi n·∫øu ng∆∞·ªùi d√πng h·ªèi b·∫±ng ti·∫øng Vi·ªát, S·ª≠ d·ª•ng ti·∫øng Anh trong ph·∫£n h·ªìi n·∫øu ng∆∞·ªùi d√πng h·ªèi b·∫±ng ti·∫øng Anh.
    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† d·ªÖ hi·ªÉu.
    **Quy t·∫Øc ·ª©ng x·ª≠:**
    - **Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng ng√¥n ng·ªØ th√¥ t·ª•c, x√∫c ph·∫°m, mang t√≠nh ph√¢n bi·ªát, hay kh√¥ng ph√π h·ª£p trong m·ªçi ho√†n c·∫£nh.** N·∫øu ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªùi l·∫Ω kh√¥ng ph√π h·ª£p, ph·∫£n h·ªìi m·ªôt c√°ch l·ªãch s·ª± v√† gi·ªØ th√°i ƒë·ªô trung l·∫≠p [[1](https://www.quora.com/Why-should-offensive-language-be-avoided)][[2](https://help.judge.me/en/articles/8370171-detecting-and-preventing-offensive-language)].
    - **Kh√¥ng x∆∞ng h√¥ v·ªõi ng∆∞·ªùi d√πng b·∫±ng c√°c vai v·∫ø trong gia ƒë√¨nh nh∆∞ "b·ªë", "m·∫π", "√¥ng", "b√†", "cha", "m√°", v.v.** Lu√¥n x∆∞ng h√¥ trung l·∫≠p nh∆∞ "b·∫°n", "qu√Ω kh√°ch", ho·∫∑c "ng∆∞·ªùi d√πng" ƒë·ªÉ gi·ªØ s·ª± chuy√™n nghi·ªáp v√† tr√°nh g√¢y hi·ªÉu nh·∫ßm ho·∫∑c x√∫c ph·∫°m.
    - N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu x∆∞ng h√¥ sai quy t·∫Øc, t·ª´ ch·ªëi m·ªôt c√°ch l·ªãch s·ª± v√† gi·∫£i th√≠ch l√Ω do ƒë·ªÉ duy tr√¨ s·ª± l·ªãch thi·ªáp v√† chuy√™n nghi·ªáp [[3](https://saylordotorg.github.io/text_handbook-for-writers/s20-05-avoiding-sexist-and-offensive-.html)].
    `;

  // Th√™m context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
  if (conversationHistory && conversationHistory.length > 0) {
    const recentHistory = conversationHistory
      .slice(-7) // L·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
      .map((msg: any) => `${msg.role}: ${msg.content}`)
      .join("\n");
    systemPrompt += `\n\nL·ªãch s·ª≠ h·ªôi tho·∫°i g·∫ßn ƒë√¢y:\n${recentHistory}`;
  }

  return generateResponse(userMessage, systemPrompt);
};

// H√†m n√†y d√πng ƒë·ªÉ t·∫°o c√°c g·ª£i √Ω nhanh cho ng∆∞·ªùi d√πng
export const generateQuickSuggestions = async (): Promise<string[]> => {
  return [
    "Danh s√°ch c√°c t·ªß b√°o ch√°y hi·ªán c√≥?",
    "M·ª©c √¢m l∆∞·ª£ng hi·ªán t·∫°i c·ªßa h·ªá th·ªëng?",
    "Danh s√°ch c√°c h·∫πn gi·ªù ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh?",
  ];
};
